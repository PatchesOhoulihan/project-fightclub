/* Generated by Babel */
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Fighter = function Fighter(x) {
    var _this = this;

    _classCallCheck(this, Fighter);

    this.name = x;
    this.str = Math.floor(Math.random() * (30 - 10 + 1)) + 10;
    this.dex = Math.floor(Math.random() * (30 - 10 + 1)) + 10;
    this.hp = 100;
    this.dmg = "Pacifist";
    this.moveSet = ["Tritt in die Eier", "Kopfnuss", "Schag ins Gesicht"];
    this.failMoves = ["Poppelt in der Nase", "Fällt über die eigenen Füße", "Ballert sich in die Hose", "Macht den Helicopter", "Fängt manisch an zu lachen"];

    //If you define a variable with a let the Variable is declared private.
    var hf = 12;
    this.hit = function (opponent) {
        var dmg = Math.floor(Math.random() * (_this.str - _this.str / 4 + 1) + _this.str / 4);
        var result = [];

        var evadeChance = opponent.dex * (Math.random() * 8);
        if (evadeChance <= 50) {
            opponent.hp -= dmg;
            //console.log("HIT!: " + dmg);
            //console.log("HP!: " + opponent.hp);
            result = ["Hit", _this.name, dmg, _this.moveSet[Math.floor(Math.random() * _this.moveSet.length)]];
        } else {
            //console.log("MISS!");
            //console.log(hf);
            result = ["Miss", _this.name, 0, _this.failMoves[Math.floor(Math.random() * _this.failMoves.length)]];
        }

        return result;
    };

    this.updateList = function () {
        var list = document.querySelector('#player ul');
        list.children[0].children[0].innerHTML = _this.name;
        list.children[1].children[0].innerHTML = _this.str;
        list.children[2].children[0].innerHTML = _this.dex;
        list.children[3].children[0].innerHTML = _this.hp;
    };
};

;