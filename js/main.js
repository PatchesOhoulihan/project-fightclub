/* Generated by Babel */

/*------------------------------------------------------------------------------------------
| Class Definition
--------------------------------------------------------------------------------------------*/

"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Fighter = function Fighter(x) {
    var _this = this;

    _classCallCheck(this, Fighter);

    this.name = x;
    this.str = Math.floor(Math.random() * (30 - 10 + 1)) + 10;
    this.dex = Math.floor(Math.random() * (30 - 10 + 1)) + 10;
    this.hp = 100;
    this.dmg = "Pacifist";
    this.moveSet = ["Tritt in die Eier", "Kopfnuss", "Schag ins Gesicht"];
    this.failMoves = ["Poppelt in der Nase", "Fällt über die eigenen Füße", "Ballert sich in die Hose", "Macht den Helicopter", "Fängt manisch an zu lachen"];

    //If you define a variable with a let the Variable is declared private.
    var hf = 12;
    this.hit = function (opponent) {
        var dmg = Math.floor(Math.random() * (_this.str - _this.str / 4 + 1) + _this.str / 4);
        var result = [];

        var evadeChance = opponent.dex * (Math.random() * 8);
        if (evadeChance <= 50) {
            opponent.hp -= dmg;
            //console.log("HIT!: " + dmg);
            //console.log("HP!: " + opponent.hp);
            result = ["Hit", _this.name, dmg, _this.moveSet[Math.floor(Math.random() * _this.moveSet.length)]];
        } else {
            //console.log("MISS!");
            //console.log(hf);
            result = ["Miss", _this.name, 0, _this.failMoves[Math.floor(Math.random() * _this.failMoves.length)]];
        }

        return result;
    };

    this.updateList = function () {
        var list = document.querySelector('#player ul');
        list.children[0].children[0].innerHTML = _this.name;
        list.children[1].children[0].innerHTML = _this.str;
        list.children[2].children[0].innerHTML = _this.dex;
        list.children[3].children[0].innerHTML = _this.hp;
    };
};

;

var Ring = function Ring() {
    var _this2 = this;

    _classCallCheck(this, Ring);

    //Vars
    this.battleMessages = [];
    var firstHitter = undefined;
    var secondHitter = undefined;

    //Methodes

    this.writeBattleLog = function () {
        var list = document.querySelector('#fightstatus');

        for (var i = 0; i < _this2.battleMessages.length; i++) {
            list.children[0].children[i].children[0].innerHTML = _this2.battleMessages[i];
        }
    };

    this.battle = function (player1, player2) {

        if (Math.random() * 2 <= 1) {
            _this2.firstHitter = player1;
            _this2.secondHitter = player2;

            //console.log(player1.name + " Attacks First!");
        } else {
                _this2.firstHitter = player2;
                _this2.secondHitter = player1;
                //console.log(player2.name + " Attacks First!");
            }

        battleLog([_this2.firstHitter.name, "", "Attacasdks First!"]);
        mainBattle(player1, player2);
    };

    var mainBattle = function mainBattle(player1, player2) {
        if (player1.hp >= 0 && player2.hp >= 0) {
            _this2.firstHitter.hit(_this2.secondHitter);

            if (Math.random() * 6 <= 3) {
                battleLog(_this2.firstHitter.hit(_this2.secondHitter));
                //console.log(this.firstHitter.name + " lands a nice blow!");
            } else {
                    battleLog(_this2.secondHitter.hit(_this2.firstHitter));
                    //console.log(this.secondHitter.name + " lands a nice blow!");
                }
            _this2.writeBattleLog();
            setTimeout(mainBattle, 500, player1, player2);
        }
    };

    //Keeps an Messagequeue with 10 Messages max
    var battleLog = function battleLog(newMessage) {
        console.log("Add this to battleLog: " + newMessage);

        if (_this2.battleMessages.length == 10) {
            _this2.battleMessages.shift();
            _this2.battleMessages.push(newMessage);
        } else {
            _this2.battleMessages.push(newMessage);
        }
    };
}

/*------------------------------------------------------------------------------------------
| Variables
--------------------------------------------------------------------------------------------*/

;

var player1 = null;

/*------------------------------------------------------------------------------------------
| Eventhandler
--------------------------------------------------------------------------------------------*/

//document.getElementById('#create-fighter').addEventListener('click', () => {
//    player1 = new Fighter(document.querySelector('#player ul'));
//    player1.updateList();
//});

document.querySelector('#create-fighter').addEventListener('click', function () {
    player1 = new Fighter(document.querySelector('#fighterName').value);
    player1.hit(new Fighter('hitter'));
    player1.updateList();
});

document.querySelector('#fight').addEventListener('click', function () {
    var arena = new Ring();

    if (typeof player1 == null) {
        console.log("Create a player first:");
    } else {
        arena.battle(player1, new Fighter('dummy'));
    }
});

/*------------------------------------------------------------------------------------------
| Main
--------------------------------------------------------------------------------------------*/