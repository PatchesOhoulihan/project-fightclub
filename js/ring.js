/* Generated by Babel */
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Ring = function Ring() {
    var _this = this;

    _classCallCheck(this, Ring);

    //----------------------------------------------------Vars----------------------------------------------------

    this.battleMessages = [];
    var firstHitter = undefined;
    var secondHitter = undefined;

    //---------------------------------------------Private Methodes-----------------------------------------------

    var writeBattleLog = function writeBattleLog() {
        var list = document.querySelector('#fightstatus');

        for (var i = 0; i < _this.battleMessages.length; i++) {
            list.children[0].children[i].children[0].innerHTML = _this.battleMessages[i];
        }
    };

    var mainBattle = function mainBattle(player1, player2) {
        if (player1.hp >= 0 && player2.hp >= 0) {
            _this.firstHitter.hit(_this.secondHitter);

            if (Math.random() * 6 <= 3) {
                battleLog(_this.firstHitter.hit(_this.secondHitter));
                //console.log(this.firstHitter.name + " lands a nice blow!");
            } else {
                    battleLog(_this.secondHitter.hit(_this.firstHitter));
                    //console.log(this.secondHitter.name + " lands a nice blow!");
                }
            writeBattleLog();
            setTimeout(mainBattle, 500, player1, player2);
        }
    };

    //Keeps an Messagequeue with 10 Messages max
    var battleLog = function battleLog(newMessage) {
        console.log("Add this to battleLog: " + newMessage);

        if (_this.battleMessages.length == 10) {
            _this.battleMessages.shift();
            _this.battleMessages.push(newMessage);
        } else {
            _this.battleMessages.push(newMessage);
        }
    };

    //---------------------------------------------Public Methodes-----------------------------------------------

    this.battle = function (player1, player2) {

        if (Math.random() * 2 <= 1) {
            _this.firstHitter = player1;
            _this.secondHitter = player2;

            //console.log(player1.name + " Attacks First!");
        } else {
                _this.firstHitter = player2;
                _this.secondHitter = player1;
                //console.log(player2.name + " Attacks First!");
            }

        battleLog([_this.firstHitter.name, "", "Attacasdks First!"]);
        mainBattle(player1, player2);
    };
};